import api from '../api';

interface User {
  id: number;
  name: string;
  email: string;
  phone?: string;
  avatar?: string;
  isDriver: boolean;
}

interface LoginCredentials {
  email: string;
  password: string;
}

interface RegisterData {
  name: string;
  email: string;
  password: string;
  phone?: string;
  isDriver?: boolean;
}

interface AuthResponse {
  token: string;
  user: User;
}

class AuthService {
  /**
   * Login a user
   */
  async login(credentials: LoginCredentials): Promise<AuthResponse> {
    try {
      // In a real implementation, this would hit an actual API endpoint
      // const response = await api.post('/auth/login', credentials);
      // return response.data;

      // Mock implementation for now
      await new Promise(resolve => setTimeout(resolve, 1000));

      if (credentials.email === 'user@example.com' && credentials.password === 'password') {
        // Passenger account
        return {
          token: 'mock-token-passenger',
          user: {
            id: 1,
            name: 'John Doe',
            email: credentials.email,
            isDriver: false
          }
        };
      } else if (credentials.email === 'driver@example.com' && credentials.password === 'password') {
        // Driver account
        return {
          token: 'mock-token-driver',
          user: {
            id: 2,
            name: 'Jane Driver',
            email: credentials.email,
            isDriver: true
          }
        };
      } else {
        throw new Error('Invalid email or password');
      }
    } catch (error) {
      if (error instanceof Error) {
        throw new Error(error.message);
      }
      throw new Error('Login failed');
    }
  }

  /**
   * Register a new user
   */
  async register(data: RegisterData): Promise<AuthResponse> {
    try {
      // In a real implementation, this would hit an actual API endpoint
      // const response = await api.post('/auth/register', data);
      // return response.data;

      // Mock implementation for now
      await new Promise(resolve => setTimeout(resolve, 1000));

      return {
        token: 'mock-token-new-user',
        user: {
          id: 3, // In a real app, this would be generated by the server
          name: data.name,
          email: data.email,
          phone: data.phone,
          isDriver: data.isDriver || false
        }
      };
    } catch (error) {
      if (error instanceof Error) {
        throw new Error(error.message);
      }
      throw new Error('Registration failed');
    }
  }

  /**
   * Get the current user profile
   */
  async getProfile(): Promise<User> {
    try {
      // In a real implementation, this would hit an actual API endpoint
      // const response = await api.get('/auth/profile');
      // return response.data;

      // Mock implementation for now
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Get the stored user data from localStorage
      const userData = localStorage.getItem('user');
      if (!userData) {
        throw new Error('User not found');
      }

      return JSON.parse(userData);
    } catch (error) {
      if (error instanceof Error) {
        throw new Error(error.message);
      }
      throw new Error('Failed to get profile');
    }
  }

  /**
   * Update the user profile
   */
  async updateProfile(data: Partial<User>): Promise<User> {
    try {
      // In a real implementation, this would hit an actual API endpoint
      // const response = await api.put('/auth/profile', data);
      // return response.data;

      // Mock implementation for now
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Get the current user data
      const userData = localStorage.getItem('user');
      if (!userData) {
        throw new Error('User not found');
      }

      const currentUser = JSON.parse(userData);
      const updatedUser = { ...currentUser, ...data };

      // Store the updated user data
      localStorage.setItem('user', JSON.stringify(updatedUser));

      return updatedUser;
    } catch (error) {
      if (error instanceof Error) {
        throw new Error(error.message);
      }
      throw new Error('Failed to update profile');
    }
  }

  /**
   * Forgot password - send password reset email
   */
  async forgotPassword(email: string): Promise<boolean> {
    try {
      // In a real implementation, this would hit an actual API endpoint
      // await api.post('/auth/forgot-password', { email });

      // Mock implementation for now
      await new Promise(resolve => setTimeout(resolve, 1000));

      console.log(`Password reset requested for: ${email}`);
      return true;
    } catch (error) {
      if (error instanceof Error) {
        throw new Error(error.message);
      }
      throw new Error('Failed to process password reset request');
    }
  }

  /**
   * Reset password with token
   */
  async resetPassword(token: string, newPassword: string): Promise<boolean> {
    try {
      // In a real implementation, this would hit an actual API endpoint
      // await api.post('/auth/reset-password', { token, newPassword });

      // Mock implementation for now
      await new Promise(resolve => setTimeout(resolve, 1000));

      console.log(`Password reset with token: ${token}`);
      return true;
    } catch (error) {
      if (error instanceof Error) {
        throw new Error(error.message);
      }
      throw new Error('Failed to reset password');
    }
  }

  /**
   * Logout user
   */
  logout(): void {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
  }
}

export default new AuthService();
